// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 17.0.0.0
//  
//     对此文件的更改可能导致不正确的行为，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Assets.Tables.Editor.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Projects\DigitalWorld\DigitalWorld\DigitalWorld\Assets\Tables\Editor\Templates\InfoTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class InfoTemplate : InfoTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("    /// <summary>\r\n    /// ");
            
            #line 13 "D:\Projects\DigitalWorld\DigitalWorld\DigitalWorld\Assets\Tables\Editor\Templates\InfoTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(describe));
            
            #line default
            #line hidden
            this.Write("\r\n    /// </summary>\r\n    [Serializable]\r\n    public partial class ");
            
            #line 16 "D:\Projects\DigitalWorld\DigitalWorld\DigitalWorld\Assets\Tables\Editor\Templates\InfoTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write("Info : InfoBase\r\n    {\r\n        public override int GetID()\r\n        {\r\n         " +
                    "   return id;\r\n        }\r\n\r\n");
            
            #line 23 "D:\Projects\DigitalWorld\DigitalWorld\DigitalWorld\Assets\Tables\Editor\Templates\InfoTemplate.tt"

        for (int i = 0; i < variableTypes.Length; ++i)
        {

            
            #line default
            #line hidden
            this.Write("        /// <summary>\r\n        /// ");
            
            #line 28 "D:\Projects\DigitalWorld\DigitalWorld\DigitalWorld\Assets\Tables\Editor\Templates\InfoTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableDescribes[i]));
            
            #line default
            #line hidden
            this.Write("\r\n        /// </summary>\r\n        public ");
            
            #line 30 "D:\Projects\DigitalWorld\DigitalWorld\DigitalWorld\Assets\Tables\Editor\Templates\InfoTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableTypes[i]));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 30 "D:\Projects\DigitalWorld\DigitalWorld\DigitalWorld\Assets\Tables\Editor\Templates\InfoTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(propertyNames[i]));
            
            #line default
            #line hidden
            this.Write(" => ");
            
            #line 30 "D:\Projects\DigitalWorld\DigitalWorld\DigitalWorld\Assets\Tables\Editor\Templates\InfoTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableNames[i]));
            
            #line default
            #line hidden
            this.Write(";\r\n        private ");
            
            #line 31 "D:\Projects\DigitalWorld\DigitalWorld\DigitalWorld\Assets\Tables\Editor\Templates\InfoTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableTypes[i]));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 31 "D:\Projects\DigitalWorld\DigitalWorld\DigitalWorld\Assets\Tables\Editor\Templates\InfoTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableNames[i]));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 32 "D:\Projects\DigitalWorld\DigitalWorld\DigitalWorld\Assets\Tables\Editor\Templates\InfoTemplate.tt"

        }

            
            #line default
            #line hidden
            this.Write("\r\n        #region Serialization\r\n\t\tpublic ");
            
            #line 37 "D:\Projects\DigitalWorld\DigitalWorld\DigitalWorld\Assets\Tables\Editor\Templates\InfoTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write("Info()\r\n\t\t{\r\n\r\n\t\t}\r\n\r\n        public ");
            
            #line 42 "D:\Projects\DigitalWorld\DigitalWorld\DigitalWorld\Assets\Tables\Editor\Templates\InfoTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write("Info(SerializationInfo info, StreamingContext context)\r\n\t\t\t: base(info, context)\r" +
                    "\n        {\r\n");
            
            #line 45 "D:\Projects\DigitalWorld\DigitalWorld\DigitalWorld\Assets\Tables\Editor\Templates\InfoTemplate.tt"

			for (int i = 0; i < variableTypes.Length; ++i)
			{

            
            #line default
            #line hidden
            this.Write("\t\t\tthis.");
            
            #line 49 "D:\Projects\DigitalWorld\DigitalWorld\DigitalWorld\Assets\Tables\Editor\Templates\InfoTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableNames[i]));
            
            #line default
            #line hidden
            this.Write(" = (");
            
            #line 49 "D:\Projects\DigitalWorld\DigitalWorld\DigitalWorld\Assets\Tables\Editor\Templates\InfoTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableTypes[i]));
            
            #line default
            #line hidden
            this.Write(")info.GetValue(\"");
            
            #line 49 "D:\Projects\DigitalWorld\DigitalWorld\DigitalWorld\Assets\Tables\Editor\Templates\InfoTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableNames[i]));
            
            #line default
            #line hidden
            this.Write("\", typeof(");
            
            #line 49 "D:\Projects\DigitalWorld\DigitalWorld\DigitalWorld\Assets\Tables\Editor\Templates\InfoTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableTypes[i]));
            
            #line default
            #line hidden
            this.Write("));\r\n");
            
            #line 50 "D:\Projects\DigitalWorld\DigitalWorld\DigitalWorld\Assets\Tables\Editor\Templates\InfoTemplate.tt"

			}

            
            #line default
            #line hidden
            this.Write("        }\r\n\r\n        public override void GetObjectData(SerializationInfo info, S" +
                    "treamingContext context)\r\n        {\r\n            base.GetObjectData(info, contex" +
                    "t);\r\n");
            
            #line 58 "D:\Projects\DigitalWorld\DigitalWorld\DigitalWorld\Assets\Tables\Editor\Templates\InfoTemplate.tt"

			for (int i = 0; i < variableTypes.Length; ++i)
			{

            
            #line default
            #line hidden
            this.Write("\t\t\tinfo.AddValue(\"");
            
            #line 62 "D:\Projects\DigitalWorld\DigitalWorld\DigitalWorld\Assets\Tables\Editor\Templates\InfoTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableNames[i]));
            
            #line default
            #line hidden
            this.Write("\", this.");
            
            #line 62 "D:\Projects\DigitalWorld\DigitalWorld\DigitalWorld\Assets\Tables\Editor\Templates\InfoTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableNames[i]));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 63 "D:\Projects\DigitalWorld\DigitalWorld\DigitalWorld\Assets\Tables\Editor\Templates\InfoTemplate.tt"

			}

            
            #line default
            #line hidden
            this.Write("        }\r\n\r\n        public override void SetupRow(DataRow row)\r\n        {\r\n");
            
            #line 70 "D:\Projects\DigitalWorld\DigitalWorld\DigitalWorld\Assets\Tables\Editor\Templates\InfoTemplate.tt"

			for (int i = 0; i < variableTypes.Length; ++i)
			{

            
            #line default
            #line hidden
            this.Write("            row[\"");
            
            #line 74 "D:\Projects\DigitalWorld\DigitalWorld\DigitalWorld\Assets\Tables\Editor\Templates\InfoTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableNames[i]));
            
            #line default
            #line hidden
            this.Write("\"] = ");
            
            #line 74 "D:\Projects\DigitalWorld\DigitalWorld\DigitalWorld\Assets\Tables\Editor\Templates\InfoTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableNames[i]));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 75 "D:\Projects\DigitalWorld\DigitalWorld\DigitalWorld\Assets\Tables\Editor\Templates\InfoTemplate.tt"

			}

            
            #line default
            #line hidden
            this.Write("        }\r\n\r\n        public override void UpdateRow(DataRow row)\r\n        {\r\n");
            
            #line 82 "D:\Projects\DigitalWorld\DigitalWorld\DigitalWorld\Assets\Tables\Editor\Templates\InfoTemplate.tt"

			for (int i = 0; i < variableTypes.Length; ++i)
			{

            
            #line default
            #line hidden
            this.Write("            this.");
            
            #line 86 "D:\Projects\DigitalWorld\DigitalWorld\DigitalWorld\Assets\Tables\Editor\Templates\InfoTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableNames[i]));
            
            #line default
            #line hidden
            this.Write(" = (");
            
            #line 86 "D:\Projects\DigitalWorld\DigitalWorld\DigitalWorld\Assets\Tables\Editor\Templates\InfoTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableTypes[i]));
            
            #line default
            #line hidden
            this.Write(")row[\"");
            
            #line 86 "D:\Projects\DigitalWorld\DigitalWorld\DigitalWorld\Assets\Tables\Editor\Templates\InfoTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableNames[i]));
            
            #line default
            #line hidden
            this.Write("\"];\r\n");
            
            #line 87 "D:\Projects\DigitalWorld\DigitalWorld\DigitalWorld\Assets\Tables\Editor\Templates\InfoTemplate.tt"

			}

            
            #line default
            #line hidden
            this.Write("        }\r\n        #endregion\r\n    }\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "D:\Projects\DigitalWorld\DigitalWorld\DigitalWorld\Assets\Tables\Editor\Templates\InfoTemplate.tt"

private string _nameField;

/// <summary>
/// Access the name parameter of the template.
/// </summary>
private string name
{
    get
    {
        return this._nameField;
    }
}

private string _describeField;

/// <summary>
/// Access the describe parameter of the template.
/// </summary>
private string describe
{
    get
    {
        return this._describeField;
    }
}

private string[] _variableNamesField;

/// <summary>
/// Access the variableNames parameter of the template.
/// </summary>
private string[] variableNames
{
    get
    {
        return this._variableNamesField;
    }
}

private string[] _propertyNamesField;

/// <summary>
/// Access the propertyNames parameter of the template.
/// </summary>
private string[] propertyNames
{
    get
    {
        return this._propertyNamesField;
    }
}

private string[] _variableTypesField;

/// <summary>
/// Access the variableTypes parameter of the template.
/// </summary>
private string[] variableTypes
{
    get
    {
        return this._variableTypesField;
    }
}

private string[] _variableDescribesField;

/// <summary>
/// Access the variableDescribes parameter of the template.
/// </summary>
private string[] variableDescribes
{
    get
    {
        return this._variableDescribesField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool nameValueAcquired = false;
if (this.Session.ContainsKey("name"))
{
    this._nameField = ((string)(this.Session["name"]));
    nameValueAcquired = true;
}
if ((nameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("name");
    if ((data != null))
    {
        this._nameField = ((string)(data));
    }
}
bool describeValueAcquired = false;
if (this.Session.ContainsKey("describe"))
{
    this._describeField = ((string)(this.Session["describe"]));
    describeValueAcquired = true;
}
if ((describeValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("describe");
    if ((data != null))
    {
        this._describeField = ((string)(data));
    }
}
bool variableNamesValueAcquired = false;
if (this.Session.ContainsKey("variableNames"))
{
    this._variableNamesField = ((string[])(this.Session["variableNames"]));
    variableNamesValueAcquired = true;
}
if ((variableNamesValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("variableNames");
    if ((data != null))
    {
        this._variableNamesField = ((string[])(data));
    }
}
bool propertyNamesValueAcquired = false;
if (this.Session.ContainsKey("propertyNames"))
{
    this._propertyNamesField = ((string[])(this.Session["propertyNames"]));
    propertyNamesValueAcquired = true;
}
if ((propertyNamesValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("propertyNames");
    if ((data != null))
    {
        this._propertyNamesField = ((string[])(data));
    }
}
bool variableTypesValueAcquired = false;
if (this.Session.ContainsKey("variableTypes"))
{
    this._variableTypesField = ((string[])(this.Session["variableTypes"]));
    variableTypesValueAcquired = true;
}
if ((variableTypesValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("variableTypes");
    if ((data != null))
    {
        this._variableTypesField = ((string[])(data));
    }
}
bool variableDescribesValueAcquired = false;
if (this.Session.ContainsKey("variableDescribes"))
{
    this._variableDescribesField = ((string[])(this.Session["variableDescribes"]));
    variableDescribesValueAcquired = true;
}
if ((variableDescribesValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("variableDescribes");
    if ((data != null))
    {
        this._variableDescribesField = ((string[])(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class InfoTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
