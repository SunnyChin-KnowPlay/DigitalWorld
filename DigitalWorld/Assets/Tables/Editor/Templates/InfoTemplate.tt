<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter name="name" type="System.String"#>
<#@ parameter name="describe" type="System.String"#>
<#@ parameter name="variableNames" type="System.String[]"#>
<#@ parameter name="propertyNames" type="System.String[]"#>
<#@ parameter name="variableTypes" type="System.String[]"#>
<#@ parameter name="variableDescribes" type="System.String[]"#>
<#@ parameter name="variableEncodes" type="System.String[]"#>
<#@ parameter name="variableDecodes" type="System.String[]"#>
<#@ parameter name="variableCalculates" type="System.String[]"#>
    /// <summary>
    /// <#= describe #>
    /// </summary>
    public partial class <#= name #>Info : InfoBase
    {
        public override int GetID()
        {
            return id;
        }

<#
        for (int i = 0; i < variableTypes.Length; ++i)
        {
#>
        /// <summary>
        /// <#= variableDescribes[i] #>
        /// </summary>
        public <#= variableTypes[i] #> <#= propertyNames[i] #> => <#= variableNames[i] #>;
        private <#= variableTypes[i] #> <#= variableNames[i] #>;
<#
        }
#>

        public <#= name #>Info()
        {
        }

#region Encode
        protected override void OnEncode()
        {
            base.OnEncode();

<#
            for (int i = 0; i < variableTypes.Length; ++i)
            {
#>
            this.<#= variableEncodes[i] #>(this.<#= variableNames[i] #>);
<#
            }
#>
        }

        protected override void OnEncode(XmlElement element)
        {
            base.OnEncode(element);

<#
            for (int i = 0; i < variableTypes.Length; ++i)
            {
#>
            this.<#= variableEncodes[i] #>(this.<#= variableNames[i] #>, "<#= variableNames[i] #>");
<#
            }
#>
        }
        #endregion

#region Decode
        protected override void OnDecode()
        {
            base.OnDecode();

<#
            for (int i = 0; i < variableTypes.Length; ++i)
            {
#>
            this.<#= variableDecodes[i] #>(ref this.<#= variableNames[i] #>);
<#
            }
#>
        }

        protected override void OnDecode(XmlElement element)
        {
            base.OnDecode(element);

<#
            for (int i = 0; i < variableTypes.Length; ++i)
            {
#>
            this.<#= variableDecodes[i] #>(ref this.<#= variableNames[i] #>, "<#= variableNames[i] #>");
<#
            }
#>
        }
#endregion

#region Calculate Size
        protected override void OnCalculateSize()
        {
            base.OnCalculateSize();

<#
            for (int i = 0; i < variableTypes.Length; ++i)
            {
#>
            this.<#= variableCalculates[i] #>(this.<#= variableNames[i] #>);
<#
            }
#>
        }
#endregion
    }
