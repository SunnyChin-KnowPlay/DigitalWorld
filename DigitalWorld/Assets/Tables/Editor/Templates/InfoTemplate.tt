<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter name="name" type="System.String"#>
<#@ parameter name="describe" type="System.String"#>
<#@ parameter name="variableNames" type="System.String[]"#>
<#@ parameter name="propertyNames" type="System.String[]"#>
<#@ parameter name="variableTypes" type="System.String[]"#>
<#@ parameter name="variableDescribes" type="System.String[]"#>
    /// <summary>
    /// <#= describe #>
    /// </summary>
    [Serializable]
    public partial class <#= name #>Info : InfoBase
    {
        public override int GetID()
        {
            return id;
        }

<#
        for (int i = 0; i < variableTypes.Length; ++i)
        {
#>
        /// <summary>
        /// <#= variableDescribes[i] #>
        /// </summary>
        public <#= variableTypes[i] #> <#= propertyNames[i] #> => <#= variableNames[i] #>;
        private <#= variableTypes[i] #> <#= variableNames[i] #>;
<#
        }
#>

        #region Serialization
		public <#= name #>Info()
		{

		}

        public <#= name #>Info(SerializationInfo info, StreamingContext context)
			: base(info, context)
        {
<#
			for (int i = 0; i < variableTypes.Length; ++i)
			{
#>
			this.<#= variableNames[i] #> = (<#= variableTypes[i] #>)info.GetValue("<#= variableNames[i] #>", typeof(<#= variableTypes[i] #>));
<#
			}
#>
        }

        public override void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            base.GetObjectData(info, context);
<#
			for (int i = 0; i < variableTypes.Length; ++i)
			{
#>
			info.AddValue("<#= variableNames[i] #>", this.<#= variableNames[i] #>);
<#
			}
#>
        }

        public override void SetupRow(DataRow row)
        {
<#
			for (int i = 0; i < variableTypes.Length; ++i)
			{
#>
            row["<#= variableNames[i] #>"] = <#= variableNames[i] #>;
<#
			}
#>
        }

        public override void UpdateRow(DataRow row)
        {
<#
			for (int i = 0; i < variableTypes.Length; ++i)
			{
#>
            this.<#= variableNames[i] #> = (<#= variableTypes[i] #>)row["<#= variableNames[i] #>"];
<#
			}
#>
        }
        #endregion
    }
