<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter name="namespaceName" type="System.String"#>
<#@ parameter name="tableNames" type="System.String[]"#>
<#@ parameter name="tableClassNames" type="System.String[]"#>
using Dream.Core;
using Dream.Table;

namespace <#= namespaceName #>
{
    /// <summary>
    /// 表格管理器
    /// </summary>
    public sealed partial class TableManager : Singleton<TableManager>
    {
        #region Tables
<#
        for (int i = 0; i < tableNames.Length; ++i)
        {
#>
        public <#= tableClassNames[i] #>Table <#= tableClassNames[i] #>Table { get; private set; } = new <#= tableClassNames[i] #>Table();
<#
        }
#>
        #endregion

        #region Decode
        public void Decode()
        {
<#
        for (int i = 0; i < tableNames.Length; ++i)
        {
#>
           <#= tableClassNames[i] #>Table = this.ApplyDecodeTable<<#= tableClassNames[i] #>Table>("<#= tableNames[i] #>");
<#
        }
#>
        }

        public void DecodeJSON()
        {
<#
        for (int i = 0; i < tableNames.Length; ++i)
        {
#>
            <#= tableClassNames[i] #>Table = this.ApplyDecodeTableWithJSON<<#= tableClassNames[i] #>Table>("<#= tableNames[i] #>");
<#
        }
#>
        }

        private T ApplyDecodeTable<T>(string tableName) where T : class
        {
            return this.ProcessDecodeTable<T>(tableName);
        }

        private T ApplyDecodeTableWithJSON<T>(string tableName) where T : class
        {
            return this.ProcessDecodeTableWithJSON<T>(tableName);
        }
        #endregion

        #region Encode
        public void Encode()
        {
<#
        for (int i = 0; i < tableNames.Length; ++i)
        {
#>
            this.ApplyEncodeTable(<#= tableClassNames[i] #>Table, "<#= tableNames[i] #>");
<#
        }
#>
        }

        private void ApplyEncodeTable(object table, string tableName)
        {
            this.ProcessEncodeTable(table, tableName);
        }
        #endregion

        #region Creator
        public static ITable CreateTable(string tableName)
        {
            switch (tableName)
            {
<#
                for (int i = 0; i < tableNames.Length; ++i)
                {
#>
                case "<#= tableNames[i] #>":
                    return new <#= tableClassNames[i] #>Table();
<#
                }
#>
                default:
                {
                    return null;
                }
            }
        }
        #endregion

    }
}
