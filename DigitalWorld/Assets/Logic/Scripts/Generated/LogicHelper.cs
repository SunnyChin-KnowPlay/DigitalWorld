// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//  
//     对此文件的更改可能导致不正确的行为，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace DigitalWorld.Logic
{
    public static partial class LogicHelper
    {
        /// <summary>
        /// 通过节点类型和ID来获取对应的节点对象
        /// </summary>
        /// <param name="nodeType"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        public static NodeBase GetNode(ENodeType nodeType, int id)
        {
            switch (nodeType)
            {
                case ENodeType.Action:
                {
                    return GetAction(id);
                }
                case ENodeType.Trigger:
                {
                    return GetNode<Trigger>();
                }
                case ENodeType.Property:
                {
                    return GetProperty(id);
                }
                default:
                    return null;
            }
        }

        /// <summary>
        /// 通过枚举来获取对应的注释
        /// </summary>
        /// <param name="action"></param>
        /// <returns></returns>
        public static string GetActionDesc(int id)
        {
            switch (id)
            {
                case 2:
                    return "游戏中的创建对象，位置是基于世界坐标的";
                case 6:
                    return "清空事件中的所有目标";
                case 3:
                    return "基于单位的创建角色，位置使用相对关系";
                case 4:
                    return "单位造成伤害";
                case 1:
                    return "杀掉角色";
                case 5:
                    return "播放动画";
                case 0:
                    return "空行动";
  
                default:
                    return null;
            }
        }

        /// <summary>
        /// 通过事件ID获取对应的注释
        /// </summary>
        /// <param name="id">事件ID</param>
        /// <returns></returns>
        public static string GetEventDesc(int id)
        {
            switch (id)
            {
                case 0:
                    return "触发";
                case 1:
                    return "迭代";
  
                default:
                    return null;
            }
        }

        /// <summary>
        /// 通过ID来获取对应的注释
        /// </summary>
        /// <param name="action"></param>
        /// <returns></returns>
        public static string GetPropertyDesc(int id)
        {
            switch (id)
            {
  
                default:
                    return null;
            }
        }

        public static Actions.ActionBase GetAction(int id)
        {
            switch (id)
            {
                case 2:
                    return GetNode<Actions.Game.CreateCharacter>();
                case 6:
                    return GetNode<Actions.Game.Unit.ClearTargets>();
                case 3:
                    return GetNode<Actions.Game.Unit.CreateCharacter>();
                case 4:
                    return GetNode<Actions.Game.Unit.Damage>();
                case 1:
                    return GetNode<Actions.Game.Unit.KillCharacter>();
                case 5:
                    return GetNode<Actions.Game.Unit.PlayAnimator>();
                case 0:
                    return GetNode<Actions.None>();
  
                default:
                    return null;
            }
        }

        public static Properties.PropertyBase GetProperty(int id)
        {
            switch (id)
            {
  
                default:
                    return null;
            }
        }
    }
}
