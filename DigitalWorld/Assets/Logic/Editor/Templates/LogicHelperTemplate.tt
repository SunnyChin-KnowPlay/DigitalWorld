<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter name="className" type="System.String"#>
<#@ parameter name="actionEnums" type="System.String[]"#>
<#@ parameter name="actionNames" type="System.String[]"#>
<#@ parameter name="actionDescs" type="System.String[]"#>
<#@ parameter name="propertyEnums" type="System.String[]"#>
<#@ parameter name="propertyNames" type="System.String[]"#>
<#@ parameter name="tips" type="System.String"#>
<#= tips #>
namespace DigitalWorld.Logic
{
    public static partial class <#= className #>
    {
        /// <summary>
        /// 通过节点类型和ID来获取对应的节点对象
        /// </summary>
        /// <param name="nodeType"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        public static NodeBase GetNode(ENodeType nodeType, int id)
        {
            switch (nodeType)
            {
                case ENodeType.Action:
                {
                    return GetAction(id);
                }
                case ENodeType.Property:
                {
                    return GetProperty(id);
                }
                case ENodeType.Trigger:
                {
                    return GetNode<Trigger>();
                }
                default:
                    return null;
            }
        }

        public static PropertyBase GetProperty(int id)
        {
            return id switch
            {
<#
                for (int i = 0; i < propertyEnums.Length; ++i)
                {
#>
                <#= propertyEnums[i] #> => GetNode<<#= propertyNames[i] #>>(),
<#
                }
#> 
                _ => null,
            };
        }

        public static T GetProperty<T>(int id) where T : PropertyBase
        {
            return GetProperty(id) as T;
        }

        /// <summary>
        /// 通过枚举来获取对应的注释
        /// </summary>
        /// <param name="action"></param>
        /// <returns></returns>
        public static string GetActionDesc(int id)
        {
            return id switch
            {
<#
                for (int i = 0; i < actionEnums.Length; ++i)
                {
#>
                <#= actionEnums[i] #> => "<#= actionDescs[i] #>",
<#
                }
#>  
                _ => null,
            };
        }

        public static Actions.ActionBase GetAction(int id)
        {
            return id switch
            {
<#
                for (int i = 0; i < actionEnums.Length; ++i)
                {
#>
                <#= actionEnums[i] #> => GetNode<<#= actionNames[i] #>>(),
<#
                }
#>                
                _ => null,
            };
        }
    }
}
