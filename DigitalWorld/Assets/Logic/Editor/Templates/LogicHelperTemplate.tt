<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter name="className" type="System.String"#>
<#@ parameter name="actionEnums" type="System.String[]"#>
<#@ parameter name="actionNames" type="System.String[]"#>
<#@ parameter name="conditionEnums" type="System.String[]"#>
<#@ parameter name="conditionNames" type="System.String[]"#>
<#@ parameter name="propertyEnums" type="System.String[]"#>
<#@ parameter name="propertyNames" type="System.String[]"#>
<#@ parameter name="eventIds" type="System.String[]"#>
<#@ parameter name="eventNames" type="System.String[]"#>
namespace DigitalWorld.Logic
{
    public sealed partial class <#= className #>
    {
        /// <summary>
        /// 通过节点类型和ID来获取对应的节点对象
        /// </summary>
        /// <param name="nodeType"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        public NodeBase GetNode(ENodeType nodeType, int id)
        {
            switch (nodeType)
            {
                case ENodeType.Condition:
                {
                    return GetCondition(id);
                }
                case ENodeType.Action:
                {
                    return GetAction(id);
                }
                case ENodeType.Behaviour:
                {
                    return GetNode<Behaviour>();
                }
                default:
                    return null;
            }
        }

        public ActionBase GetAction(int id)
        {
            switch (id)
            {
<#
				for (int i = 0; i < actionEnums.Length; ++i)
				{
#>
				case <#= actionEnums[i] #>:
					return GetNode<Action<#= actionNames[i] #>>();
<#
				}
#>              
            }
            return null;
        }

        public ConditionBase GetCondition(int id)
        {
            switch (id)
            {
<#
				for (int i = 0; i < conditionEnums.Length; ++i)
				{
#>
				case <#= conditionEnums[i] #>:
					return GetNode<Condition<#= conditionNames[i] #>>();
<#
				}
#>              
            }
            return null;
        }

		
    }
}
