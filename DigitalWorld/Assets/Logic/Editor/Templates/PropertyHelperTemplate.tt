<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter name="properties" type="System.Collections.Generic.Dictionary<System.String, System.Collections.Generic.List<System.String>>"#>
<#@ parameter name="namespaceName" type="System.String"#>
using System;
using System.Collections.Generic;

namespace <#= namespaceName #>.Properties
{
	public static partial class PropertyHelper
	{
		private static Dictionary<Type, Type[]> properties = null;

        public static Dictionary<Type, Type[]> Properties
        {
            get
            {
                if (null == properties)
                {
                    properties = new Dictionary<Type, Type[]>
                    {
<#
                        foreach (var kvp in properties)
			            {
#>
                        {
                            typeof(<#= kvp.Key #>),
                            new Type[]
                            {
<#
                                for (int i = 0; i < kvp.Value.Count; ++i)
                                {
#>
                                typeof(<#= kvp.Value[i] #>),
<#
                                }
#>
                            }
                        },
<#
                        }
#>
                    };
                }

                return properties;
            }
        }

		public static Type[] GetPropertyTypes(Type valueBaseType)
        {
            Properties.TryGetValue(valueBaseType, out Type[] result);
            return result;
        }
	}

}
