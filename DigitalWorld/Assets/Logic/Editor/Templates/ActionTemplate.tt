<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ parameter name="className" type="System.String"#>
<#@ parameter name="types" type="System.String[]"#>
<#@ parameter name="varNames" type="System.String[]"#>
<#@ parameter name="descripts" type="System.String[]"#>
<#@ parameter name="id" type="System.Int32"#>
<#@ parameter name="desc" type="System.String"#>
<#@ parameter name="usingNamespaces" type="System.String[]"#>
<#@ parameter name="serializeFuncs" type="System.String[]"#>
<#@ parameter name="deserializeFuncs" type="System.String[]"#>
<#@ parameter name="defaultValues" type="System.String[]"#>
<#@ parameter name="calculateFuncs" type="System.String[]"#>
<#@ parameter name="namespaceName" type="System.String"#>
<#@ parameter name="propertyTypes" type="System.String[]"#>
<#@ parameter name="propertyNames" type="System.String[]"#>
<#@ parameter name="tips" type="System.String"#>
<#= tips #>
<#
	for (int i = 0; i < usingNamespaces.Length; ++i)
	{
#>
using <#= usingNamespaces[i] #>;
<#
	}
#>
using System.Collections.Generic;
#if UNITY_EDITOR
using System.Xml;
#endif

namespace <#= namespaceName #>
{
	/// <summary>
    /// <#= desc #>
    /// </summary>
	public partial class <#= className #> : ActionBase
	{
		#region Properties
<#
		for (int i = 0; i < propertyTypes.Length; ++i)
		{
#>
		public PropertyTemplate<<#= propertyTypes[i] #>> <#= propertyNames[i] #> => GetChild(<#= i #>) as PropertyTemplate<<#= propertyTypes[i] #>>;
<#		
		}
#>       
        #endregion

		#region Fields
<#
		for (int i = 0; i < types.Length; ++i)
		{
#>
		/// <summary>
        /// <#= descripts[i] #>
        /// </summary> 
		public <#= types[i] #> <#= varNames[i] #> = default;
<#
		}
#>
		#endregion
		
		#region Common
		public override int Id
		{
			get
			{
				return <#= id #>;
			}
		}

#if UNITY_EDITOR
		/// <summary>
        /// 当被编辑器创建时的回调
        /// </summary>
        public override void OnCreate()
        {
			base.OnCreate();
            Type[] types = null;

<#
			for (int i = 0; i < propertyTypes.Length; ++i)
			{
#>
			types = Properties.PropertyHelper.GetPropertyTypes(typeof(<#= propertyTypes[i] #>));
            if (null != types && types.Length > 0)
            {
				if (System.Activator.CreateInstance(types[0]) is Properties.PropertyBase pb)
                {
					pb.Name = "<#= propertyNames[i] #>";
                    pb.SetParent(this);
                }
            }
<#
			}
#>  
        }
#endif

		public override void OnAllocate()
        {
			base.OnAllocate();

        }

		public override void OnRecycle()
        {
            base.OnRecycle();
<#
			for (int i = 0; i < types.Length; ++i)
			{
#>
			<#= varNames[i] #> = default;
<#
			}
#>
        }

		public override object Clone()
        {
			<#= className #> v = null;
			if (Application.isPlaying)
            {
				v = Dream.Core.ObjectPool<<#= className #>>.Instance.Allocate();
            }
			else
			{
				v = new <#= className #>();
			}
			
			if (null != v)
			{
				this.CloneTo(v);
			}

            return v;
        }

		public override T CloneTo<T>(T obj)
        {
            <#= className #> v = base.CloneTo(obj) as <#= className #>;
            if (null != v)
            {
<#
				for (int i = 0; i < types.Length; ++i)
				{
#>
				v.<#= varNames[i] #> = this.<#= varNames[i] #>;
<#
				}
#>
            }
            return obj;
        }
		#endregion

		#region Editor
#if UNITY_EDITOR
        private static Dictionary<string, string> fieldDescs = new Dictionary<string, string>();

        private static Dictionary<string, string> FieldDescs
        {
            get
            {
                if (null == fieldDescs)
                    fieldDescs = new Dictionary<string, string>();

                if (fieldDescs.Count < 1)
                {
<#
		            for (int i = 0; i < varNames.Length; ++i)
		            {
#>
                    fieldDescs.Add("<#= varNames[i] #>", "<#= descripts[i] #>");
<#
		            }
#>
                }

                return fieldDescs;
            }
        }

		protected override string GetFieldDesc(string fieldName)
        {
            Dictionary<string, string> descs = FieldDescs;
            string v = string.Empty;
            descs.TryGetValue(fieldName, out v);
            return v;
        }

        public override string Desc
        {
            get
            {
                return "<#= desc #>";
            }
        }
#endif
		#endregion

		#region Serializion
		protected override void OnCalculateSize()
        {
            base.OnCalculateSize();
<#
			for (int i = 0; i < types.Length; ++i)
			{
#>
			<#= calculateFuncs[i] #>(this.<#= varNames[i] #>);
<#
			}
#>  
        }

		protected override void OnEncode()
        {
            base.OnEncode();
<#
			for (int i = 0; i < types.Length; ++i)
			{
#>
			<#= serializeFuncs[i] #>(this.<#= varNames[i] #>);
<#
			}
#>          
        }

        protected override void OnDecode()
        {
            base.OnDecode();
			
<#
			for (int i = 0; i < types.Length; ++i)
			{
#>
			<#= deserializeFuncs[i] #>(ref this.<#= varNames[i] #>);
<#
			}
#>
        }
		
#if UNITY_EDITOR
        protected override void OnDecode(XmlElement node)
        {
            base.OnDecode(node);
			
<#
			for (int i = 0; i < types.Length; ++i)
			{
#>
			<#= deserializeFuncs[i] #>(ref this.<#= varNames[i] #>, "<#= varNames[i] #>");
<#
			}
#>
        }

        protected override void OnEncode(XmlElement node)
        {
			base.OnEncode(node);
<#
			for (int i = 0; i < types.Length; ++i)
			{
#>
			<#= serializeFuncs[i] #>(this.<#= varNames[i] #>, "<#= varNames[i] #>");
<#
			}
#>
        }


#endif
		#endregion
	}
}
